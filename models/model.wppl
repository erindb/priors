
// time webppl model.wppl --require priorUtils

// notes
// - how do log probabilities compare between the dependent measures?

// to do
// - add subject-wise variables
// - posteriors predictives

var data_numberChoice = dataFrame(
			priorUtils.readCSV('../prag/data/number_dat.csv'),
	["workerid","response","max","chosen_bin","chosen_min",
			"chosen_max","steps"])
var data_sliderBins = dataFrame(
			priorUtils.readCSV('../prag/data/bin_dat_noZeros.csv'),
	["workerid","bin_num","response","nresponse"])
var data_lightning = dataFrame(
			priorUtils.readCSV('../prag/data/choice_dat.csv'),
	["workerid", "chosen_tag", "unchosen_tag", "chosen_bin", 
						"unchosen_bin", "chosen_higher"])

var items = _.uniq(_.pluck(data_numberChoice, "tag"))
var subjects = _.uniq(_.pluck(data_numberChoice, "workerid"))

var model = function(){

	foreach(items,function(i){

		// var t0 = priorUtils.getTime()
		var priors = dirichlet([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])

		var itemNumberData = subset(data_numberChoice, "tag", i)
		var itemSliderData = subset(data_sliderBins, "tag", i)
		var itemLightningData = subset(data_lightning, "tag", i)

		foreach(subjects,function(s){

			var subjectivePriors = priors

			// give a number task data
			var numberDatum = subset(itemNumberData, 
									"workerid", s)[0]["chosen_bin"]
			var numberScr = discreteERP.score([subjectivePriors], 
												numberDatum-1)

			// binned histogram task data
			var sliderData = _.pluck(
				_.sortBy(subset(itemSliderData, "workerid", s), "bin_num"),
				"nresponse")
			var sliderScr = dirichletERP.score(subjectivePriors, sliderData)

			// lightning round task data
			var lightningData = subset(itemLightningData, "workerid", s)
			var lightningScr = reduce(function(d, memo){
				var chosenWeight = subjectivePriors[d["chosen_bin"] - 1]
				var unchosenWeight = subjectivePriors[d["unchosen_bin"] - 1]
				var normalizedWeights = [chosenWeight/
											(chosenWeight+unchosenWeight),
										unchosenWeight/
											(chosenWeight+unchosenWeight)]
				var coinWeight = (1 + normalizedWeights[0] - 
									  normalizedWeights[1] ) / 2

				return memo + bernoulliERP.score([coinWeight],true)
			}, 0, lightningData)


			factor(lightningScr+sliderScr+numberScr)

			// posterior predictives

			// foreach(_.range(1,16), function(n){
			// 	query.add(["predictive", "number",s,i], subjectivePriors)
			// })

		})
	
		// console.log(t1-t0)
		query.add(["posterior","priorVector", i], priors)

	})

	return query
}


// data_sliderBins
// data_lightning
var inference = "IncrMH"
var samples = 50000
var burn = samples/2

var resultsERP = IncrementalMH(model, samples, 
	{verbose:true, verboseLag: samples/20, burn:burn})

console.log('inference complete. writing results to file...')

var outputFile = "results/priors-base-" + inference + samples + "burn" + burn + ".csv"

priorUtils.erpWriter(resultsERP, outputFile)
console.log('output written to ' + outputFile)



// data_numberChoice
// var s = 19
// var itemSliderData = subset(data_sliderBins, "tag", "laptop")

// var workerBins = subset(itemSliderData, "workerid", s)

// 			var sliderData = _.pluck(
// 				_.sortBy(subset(itemSliderData, "workerid", s), "bin_num"),
// 				"nresponse")

// 			sliderData
// var d = priorUtils.getOrderedBinData(workerBins)
// d
// dirichletERP.score([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
// 	d)

// orderBins(workerBins, bins)
// _.sortBy(workerBins, 
// 	function(o){return priorUtils.wpParseFloat(o[bin_num])})
// workerBins.sort(function(a){
// 	return priorUtils.wpParseFloat(a[bin_num])
// })


// itemSliderData

// var priors = dirichlet([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])

// var d = subset(
// 	subset(data_lightning, 
// 		"tag", 
// 		"coffee"), 
// "workerid", 5)[0]

// var coinWeight = (1 + priors[d["chosen_bin"]] - priors[d["unchosen_bin"]])/2
// bernoulliERP.score([coinWeight], true)
// items
// var y = map(function(i){
// 	return priorUtils.wpParseFloat(i)
// 	}, 
// var y = _.pluck(subset(subset(data_sliderBins, "tag", "coffee"), "workerid", 3),"nresponse")


// // y.length
// // subset(subset(data_sliderBins, "tag", "coffee"), "workerid", 3)
// // y
// dirichletERP.score(lstMultiply(x, 16), y)

// discreteERP.score([x], 3)

// data_sliderBins
// data_lightning